# -*- coding: utf-8 -*-
"""Topic Modeling - LDA (Hw 2 Part 1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Uh4SSvMkJeGqPiyMK5JfvYW0iY2loWmU

# Hw 2 Part 1:
#Topic Modeling using LDA
---
"""

from google.colab import drive
drive.mount('/content/gdrive')

# Commented out IPython magic to ensure Python compatibility.
import re
import numpy as np
import pandas as pd
import os

# Gensim
import gensim
from gensim.utils import simple_preprocess
import gensim.corpora as corpora
from gensim.models import CoherenceModel
from gensim.models import ldaseqmodel
from gensim.test.utils import datapath

# stopwords
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import PorterStemmer
from nltk.stem import WordNetLemmatizer
nltk.download('punkt')
nltk.download('wordnet')
nltk.download('stopwords') 

# spacy for lemmatization
import spacy

# modeling
from sklearn.model_selection import train_test_split

# Plotting tools
!pip install pyLDAvis
import pyLDAvis
import pyLDAvis.gensim 
import matplotlib.pyplot as plt
# %matplotlib inline
from pprint import pprint

# Set up log to terminal
import logging
logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)

import warnings
warnings.filterwarnings("ignore",category=DeprecationWarning)

#!pip install playsound
#from playsound import playsound

from datetime import datetime, date

path = r'/content/gdrive/My Drive/Colab_Datasets'
os.chdir(path)

"""# *Stratified Sampling*"""

df = pd.read_excel('Index_fund_all.xlsx')
df = df.dropna(axis=0)
n = 389
df = df.groupby('filing_year').apply(lambda x: x.sample(n=n))    #[389, 504, 579, 619, 628, 636, 705, 810, 891]
df = df.reset_index(drop=True)
df = pd.DataFrame(df)
#print(df)

"""# *Regular Sampling*"""

df = pd.read_excel('Index_fund_all.xlsx')
df = df.dropna(axis=0)

"""# *Data PreProcessing*"""

df1 = df.principal_strategies
df2 = df1.values.tolist()

def sentence_to_words(sentences):
    for sentence in sentences:
        yield(gensim.utils.simple_preprocess(sentence.lower(), deacc=True))  # deacc=True removes punctuations

df3 = list(sentence_to_words(df2))

# Removing Stop Words
stop_words = stopwords.words('english')
stop_words.extend(['from', 'subject', 're', 'edu', 'use','index','fund'])

def remove_stopwords(texts):
    return [[word for word in simple_preprocess(str(doc)) if word not in stop_words] for doc in texts]

df4 = remove_stopwords(df3)

# Lemmatization
def lemmatization(texts, allowed_postags=['NOUN', 'ADJ', 'VERB', 'ADV']):
    texts_out = []
    for sent in texts:
        doc = nlp(" ".join(sent)) 
        texts_out.append([token.lemma_ for token in doc if token.pos_ in allowed_postags])
    return texts_out

nlp = spacy.load('en', disable=['parser', 'ner'])

df5 = lemmatization(df4, allowed_postags=['NOUN', 'ADJ', 'VERB', 'ADV'])

dict = corpora.Dictionary(df5)

df6 = df5.copy()
corpus = [dict.doc2bow(word) for word in df5]
print('Number of unique tokens: %d' % len(dict))
print('Number of documents: %d' % len(corpus))

"""# Fitting the Model"""

starttime = datetime.now()

train_corpus, test_corpus = train_test_split(corpus, train_size=0.8)

def compute_loglikelihood_values(dictionary, df, train, test, limit, start, step, passes):
    coherence_values = []
    likelihood_values = []
    model_list = []
    
    for num_topics in range(start, limit, step):
        model = gensim.models.ldamodel.LdaModel(corpus=train,
                                                id2word=dictionary,
                                                num_topics=num_topics, 
                                                random_state=100,
                                                passes=passes,
                                                alpha='auto',
                                                per_word_topics=False)
        
        model_list.append(model)

        likelihood_values.append(model.log_perplexity(test))

        coherencemodel = CoherenceModel(model=model, 
                                        texts=df6, 
                                        dictionary=dictionary, 
                                        coherence='c_v')
        
        coherence_values.append(coherencemodel.get_coherence())
    
    return model_list, likelihood_values, coherence_values


start = 10 
limit = 40
step  = 1
passes = 50

model_list, likelihood_values, coherence_values = compute_loglikelihood_values(dictionary=dict, 
                                                                               df=df6,
                                                                               train=train_corpus,
                                                                               test=test_corpus, 
                                                                               limit=limit,
                                                                               start=start,
                                                                               step=step,
                                                                               passes=passes)

stoptime = datetime.now()
################################################################################
print('')
print('')
print('')
print('')
print('')
# Score Charts
fig, ax1 = plt.subplots()
plt.title('LDA Topic Modeling - Score Chart')
# Log Likelihood Plot
x = range(start, limit, step)
color = 'tab:red'
ax1.set_xlabel('No. of Topics')
ax1.set_ylabel('Log Liklihood Score', color=color)
ax1.plot(x, likelihood_values, color=color)
ax1.tick_params(axis='y', labelcolor=color)

# Coherence Plot
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

color = 'tab:blue'
ax2.set_ylabel('Coherence Score', color=color)  
ax2.plot(x, coherence_values, color=color)
ax2.tick_params(axis='y', labelcolor=color)

fig.tight_layout()  # otherwise the right y-label is slightly clipped
plt.show()

# Model Metrics
# Parameters
print('Parameters')
date = date.today()
d2 = date.strftime("%B %d, %Y")
print('Date:{}'.format(d2))
print('Range: {}:{}:{}'.format(start,step,limit))
print('Number of unique tokens: %d' % len(dict))
print('Stratified Sample Group Size: %d' % n)
print('Number of documents: %d' % len(corpus))
print('Number of passes: %d' % passes)
#startdt_string = starttime.strftime("%d/%m/%Y %H:%M:%S")
#stopdt_string = stoptime.strftime("%d/%m/%Y %H:%M:%S")
runtime = stoptime - starttime
print('Runtime:{}'.format(runtime))


# Optimal Models
z = pd.DataFrame({'Topics':x, 'Coherence_values':coherence_values, 'Log_Liklihood_Score':likelihood_values})

x11 = z.loc[z.Coherence_values.idxmax(), 'Topics']
x12 = round(z['Coherence_values'].max(), 2)
print('')
print('Optimal Coherent Model')
print('Coherency score: {}'.format(x12))
print('# of Topics: %d' % x11)

x21 = z.loc[z.Log_Liklihood_Score.idxmin(), 'Topics']
x22 = round(z['Log_Liklihood_Score'].min(),2)
print('')
print('Optimal Log-Liklihood Model')
print('Log-Liklihood score: {}'.format(x22))
print('# of Topics: %d' % x21)
print('')
print('')
print('')
print('')
print('')



"""# Bubble Charts"""

#dictionary = gensim.corpora.Dictionary.load('dictionary.gensim')
#corpus = pickle.load(open('corpus.pkl', 'rb'))
#lda = gensim.models.ldamodel.LdaModel.load('model5.gensim')
#import pyLDAvis.gensim
lda_display = pyLDAvis.gensim.prepare(model_list[0], corpus, dict, sort_topics=False)
pyLDAvis.display(lda_display)